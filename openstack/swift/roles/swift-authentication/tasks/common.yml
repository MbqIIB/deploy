---

- name: Get suffix of file with variables by tag
  local_action: shell ls group_vars | grep tag_Name_proxy
  register: group_proxy

- name: Modify variables in the file tag_Name_proxy
  local_action: shell sed -i -e 's/\(^[ansible_|ec2_].*\:\)/proxy_\1/' group_vars/{{ item }}
  with_items:
    - "{{ group_proxy.stdout_lines }}"
- name: Include variables from swift-porxy host
  include_vars: group_vars/{{ item }}
  with_items:
    - "{{ group_proxy.stdout_lines }}"

- name: copy over keystone.conf from template
  template:
    src: keystone.conf.j2
    dest: /etc/keystone/keystone.conf
    owner: root
    group: root
    mode: 0644
  notify:
    - restart keystone

- name: check if there is a /etc/keystone/ssl/certs/keystone.pem file
  command: ls /etc/keystone/ssl/certs/keystone.pem
  register: keystone_pem_missing
  ignore_errors: true
  changed_when: keystone_pem_missing.rc > 0

- name: remove /etc/keystone/ssl if there is not a keystone.pem file
  file:
    path: /etc/keystone/ssl
    state: absent
  when: keystone_pem_missing.rc > 0
  changed_when: keystone_pem_missing.rc > 0

- name: use keystone ssl_setup to create ssl configuration files and keys
  shell: rm -rf /etc/keystone/ssl; keystone-manage ssl_setup --keystone-user keystone --keystone-group keystone
           creates=/etc/keystone/ssl/certs/keystone.pem
  when: keystone_pem_missing.rc > 0
  notify:
    - restart keystone

- name: Start mariadb server
  shell: systemctl start mariadb

- name: create keystone database
  mysql_db:
    name: keystone
    state: present
  register: keystone

- name: create keystone mysql user
  mysql_user:
    name: keystone
    password: "{{ keystone_mysql_password }}"
    priv: keystone.*:ALL
    state: present

- name: run keystone db_sync
  command: keystone-manage db_sync
  when: keystone.changed

- name: restart debian keystone
  service:
    name: keystone
    state: restarted
  when: keystone.changed and ansible_os_family == 'Debian'

- name: restart redhat keystone
  service:
    name: openstack-keystone
    state: restarted
  when: keystone.changed and ansible_os_family == 'RedHat'

- name: ensure keystone debian keystone is running
  service:
    name: keystone
    state: running
  when: ansible_os_family == 'Debian'

- name: ensure redhat keystone is running
  service:
    name: openstack-keystone
    state: running
  when: ansible_os_family == 'RedHat'

- name: wait for keystone to come back up
  wait_for:
    host: "{{ inventory_hostname  }}"
    port: 35357


 #create endpoints


- name: create keystone identity point
  keystone_service:
    insecure: yes
    name: keystone
    type: identity
    description: "Keystone Identity Service"
    publicurl: http://{{ inventory_hostname  }}:5000/v2.0"
    internalurl: http://{{ ec2_private_dns_name }}:5000/v2.0"
    adminurl: http://{{ ec2_private_dns_name }}:35357/v2.0"
    region: "{{ keystone_region }}"
    token: "{{ keystone_admin_token }}"
    endpoint: "http://127.0.0.1:35357/v2.0"

- name: create EC2 compatability service
  keystone_service:
     insecure: yes
     name: ec2
     type: ec2
     description: "EC2 Compatability Layer"
     publicurl: http://{{ inventory_hostname }}:8773/services/Cyoud
     internalurl: http://{{ ec2_private_dns_name }}:8773/services/Cloud
     adminurl: http://{{ ec2_private_dns_name }}:8773/services/Admin
     region: "{{ keystone_region }}"
     token: "{{ keystone_admin_token }}"
     endpoint: "http://127.0.0.1:35357/v2.0"

- name: create object storage service
  keystone_service:
     insecure: yes
     name: swift
     type: 'object-store'
     description: "Object Storage Service"
     publicurl: 'http://{{ proxy_ec2_public_dns_name }}/v1/AUTH_$(tenant_id)s'
     internalurl: 'http://{{ proxy_ec2_private_dns_name }}//v1/AUTH_$(tenant_id)s'
     adminurl: 'http://{{ proxy_ec2_private_dns_name }}//v1'
     region: "{{ keystone_region }}"
     token: "{{ keystone_admin_token }}"
     endpoint: "http://127.0.0.1:35357/v2.0"

#
# Create tenants
#

- name: create service tenant
  keystone_user:
     token: "{{ keystone_admin_token }}"
     tenant: service
     tenant_description: "Service Tenant"
     endpoint: "http://127.0.0.1:35357/v2.0"

- name: create admin tenant
  keystone_user:
     token: "{{ keystone_admin_token }}"
     tenant: admin
     tenant_description: "Admin Tenant"
     endpoint: "http://127.0.0.1:35357/v2.0"

- name: create demo tenant
  keystone_user:
     token: "{{ keystone_admin_token }}"
     tenant: demo
     tenant_description: "Default Tenant"
     endpoint: "http://127.0.0.1:35357/v2.0"


# create users


- name: create admin user
  keystone_user:
    token: "{{ keystone_admin_token }}"
    user: "{{ keystone_admin_user }}"
    tenant: demo
    password: "{{ keystone_admin_user_password }}"
    endpoint: "http://127.0.0.1:35357/v2.0"

- name: create swift service user
  keystone_user:
    token: "{{ keystone_admin_token }}"
    user: swift
    tenant: service
    password: "{{ keystone_generic_service_password }}"
    endpoint: "http://{{ ec2_private_dns_name }}:35357/v2.0"

- name: create ec2 service user
  keystone_user:
    token: "{{ keystone_admin_token }}"
    user: ec2
    tenant: service
    password: "{{ keystone_generic_service_password }}"
    endpoint: "http://{{ ec2_private_dns_name }}:35357/v2.0"

- name: create test user
  keystone_user:
    token: "{{ keystone_admin_token }}"
    user: "{{ keystone_test_user }}"
    tenant: demo
    password: "{{ keystone_test_user_password }}"
    endpoint: "http://{{ ec2_private_dns_name }}:35357/v2.0"


# create and apply roles


- name: create an admin role and add the admin to it
  keystone_user:
    token: "{{ keystone_admin_token }}"
    role: "{{ keystone_admin_role }}"
    user: "{{ keystone_admin_user }}"
    tenant: "{{ keystone_admin_tenant }}"
    endpoint: "http://127.0.0.1:35357/v2.0"

- name: create an admin role and add the admin to it
  keystone_user:
    token: "{{ keystone_admin_token }}"
    role: "{{ keystone_admin_role }}"
    user: swift
    tenant: service
    endpoint: "http://127.0.0.1:35357/v2.0"

- name: create an admin role and add the admin to it
  keystone_user:
    token: "{{ keystone_admin_token }}"
    role: "{{ keystone_admin_role }}"
    user: ec2
    tenant: service
    endpoint: "http://127.0.0.1:35357/v2.0"

- name: create a swiftoperator role and add the demo user to it
  keystone_user:
    token: "{{ keystone_admin_token }}"
    role: swiftoperator
    user: "{{ keystone_test_user }}"
    tenant: demo
    endpoint: "http://127.0.0.1:35357/v2.0"
